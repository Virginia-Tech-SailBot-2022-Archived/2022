import os
import math
import cv2
import matplotlib.pyplot as plt
import numpy as np
import copy
import sys


def gaussian(x, mu, sig):
    return (1 / (sig * np.sqrt(2 * np.pi))) * np.exp(-np.power(x - mu, 2.) / (2 * np.power(sig, 2.)))


def add_gaussians(x, mu, std):
    X = np.zeros([])
    for i in range(len(mu)):
        X = X + gaussian(x, mu[i], std[i])
    return X


def x_data(hist, K):
    X = []
    for i in range(256):
        if int(hist[i]) > 0:
            x = []
            x = [i] * int(hist[i])
            for i in range(len(x)):
                X.append(x[i])

    mu = []
    index = np.random.randint(0, len(X), K * 1)
    for i in range(K):
        mu.append(X[index[i]])

    return np.array(X), mu


def EM(x, K, mu, std):
    pic = []

    for i in range(K):
        pic.append(1 / K)

    r = np.zeros([len(x), K])

    for i in range(0, K):
        for j in range(0, len(x)):
            r[j][i] = gaussian(x[j], mu[i], std[i]) * pic[i]

    for i in range(len(r)):
        r[i] = r[i] / (np.sum(pic) * np.sum(r, axis=1)[i])

    ################
    #	#M Step#
    ################

    L = 0

    iterations = []
    log_like_pi = []
    log_like_m = [mu]
    log2 = []

    while (L < 500):

        new_m = []
        new_std = []
        new_pi = []
        prob_temp = []

        prob_temp = []
        for c in range(len(r[0])):
            m = np.sum(r[:, c])
            prob_temp.append(np.sum(r[:, c]))

        for m in prob_temp:
            new_pi.append(m / np.sum(prob_temp))

            # New Mean
        new_m = np.sum(x.reshape(len(x), 1) * r, axis=0) / prob_temp

        # New Std
        for c in range(K):
            new_std.append(np.sqrt((1 / prob_temp[c]) * np.dot(
                ((np.array(r[:, c]).reshape(len(x), 1)) * (x.reshape(len(x), 1) - new_m[c])).T,
                (x.reshape(len(x), 1) - new_m[c]))))

        iterations.append(j)
        log_like_pi.append(new_pi)
        log2.append(new_m)
        log_like_m.append(new_m)

        for i in range(K):
            adheesh = np.sum(log_like_m, axis=1) / (K)
        if abs((adheesh[len(adheesh) - 1]) - (adheesh[len(adheesh) - 2])) < 0.001:
            break

        r = np.zeros([len(x), K])

        for i in range(0, K):
            for j in range(0, len(x)):
                r[j][i] = gaussian(x[j], new_m[i], new_std[i][0][0]) * new_pi[i]

        for i in range(len(r)):
            r[i] = r[i] / (np.sum(new_pi) * np.sum(r, axis=1)[i])

        L += 1

    return new_m, new_std


new_hr_r = np.zeros([256, 1], dtype=np.float32)
new_hr_g = np.zeros([256, 1], dtype=np.float32)
new_hr_b = np.zeros([256, 1], dtype=np.float32)

pdf_gg = np.zeros([16, 16], dtype=np.uint8)
pdf_rr = np.zeros([16, 16], dtype=np.uint8)
pdf_yy = np.zeros([16, 16], dtype=np.uint8)

c_red = np.zeros([16, 16], dtype=np.uint8)

Avg_Red = np.zeros([16, 16, 3], dtype=np.uint8)

N = 19

new_R = []

'''
reading code
'''


for i in range(1, N):
    #print(i)
    red = cv2.imread(os.getcwd() + '/cropped/cropped%d.png' % i)
    #print('red as int', red.astype(int))
    #cv2.imshow('frames', red)
    red = cv2.GaussianBlur(red, (5, 5), 0)

    # hg_r = cv2.calcHist([green],[2],None,[256],[0,300])

    # hg_g = cv2.calcHist([green],[1],None,[256],[0,300])
    # hg_b = cv2.calcHist([green],[0],None,[256],[0,300])

    hr_r, bins = np.histogram(red[:, :, 2], 256, [0, 256])
    hr_r = np.reshape(hr_r, (-1, 1))
    hr_g, bins = np.histogram(red[:, :, 1], 256, [0, 256])
    hr_g = np.reshape(hr_g, (-1, 1))
    hr_b, bins = np.histogram(red[:, :, 0], 256, [0, 256])
    hr_b = np.reshape(hr_b, (-1, 1))

    new_hr_r[:] = new_hr_r[:] + hr_r[:]
    new_hr_g[:] = new_hr_g[:] + hr_g[:]
    new_hr_b[:] = new_hr_b[:] + hr_b[:]

    RR_Red = red[:, :, 2]
    RR_Green = red[:, :, 1]
    RR_Blue = red[:, :, 0]
    Avg_Red = Avg_Red.astype(int) + red.astype(int)

print("Training Buoys")

new_hr_r[:] = new_hr_r[:] / N
new_hr_g[:] = new_hr_g[:] / N
new_hr_b[:] = new_hr_b[:] / N

Avg_Red = Avg_Red / N

Avg_Red_RedChannel = np.mean(Avg_Red[:, :, 2])

xa = np.linspace(0, 255, 1000)

# """RED"""

std_red_green = [1, 2]
std_red_red = [1, 3, 2]
std_red_blue = [1, 2]

XR_G, mu_red_green = x_data(new_hr_g, 2)
XR_R, mu_red_red = x_data(new_hr_r, 3)
XR_B, mu_red_blue = x_data(new_hr_b, 2)

mu_red_r, std_red_r = EM(XR_R, 3, mu_red_red, std_red_red)
mu_red_g, std_red_g = EM(XR_G, 2, mu_red_green, std_red_green)
mu_red_b, std_red_b = EM(XR_B, 2, mu_red_blue, std_red_blue)

RED_RED = add_gaussians(xa, mu_red_r, std_red_r)
RED_GREEN = add_gaussians(xa, mu_red_g, std_red_g)
RED_BLUE = add_gaussians(xa, mu_red_b, std_red_b)
print("Red Trained")
# plt.figure(1)
# plt.fill(new_hr_r/256,color='r')
# plt.plot(xa, RED_RED.T, color='red',  linestyle='dashed',linewidth=2)
# plt.fill(new_hr_g/256,color='g')
# plt.plot(xa,RED_GREEN.T, color='green',  linestyle='dashed',linewidth=2)
# plt.fill(new_hr_b/256,color='b')
# plt.plot(xa,RED_BLUE.T, color='blue',  linestyle='dashed',linewidth=2)
# plt.title("Red Buoy")
# plt.show()

# plt.figure(1)
# plt.fill(new_hr_r/256,color='r')
# plt.plot(xa,  YELLOW_RED.T, color='red',  linestyle='dashed',linewidth=3)
# plt.fill(new_hy_g/256,color='g')
# plt.plot(xa, YELLOW_GREEN.T, color='green',  linestyle='dashed',linewidth=3)
# plt.fill(new_hy_b/256,color='b')
# plt.plot(xa, YELLOW_BLUE.T, color='blue',  linestyle='dashed',linewidth=3)
# plt.title("Yellow Buoy")
# plt.show()

mu_red_red = np.array(mu_red_r)
std_red_red = np.array([std_red_r[0][0][0], std_red_r[1][0][0], std_red_r[2][0][0]])

print("All Buoys Trained")
kernel = cv2.getStructuringElement(cv2.MORPH_CROSS, (5, 5))
count = 0
'''
checks if center1 is inside cente2'''
def inside(center1, radius1, center2, radius2):
    distance_between_centers = math.sqrt( ((center1[0]-center2[0])**2)+((center1[1]-center2[1])**2) )
    if (distance_between_centers < radius2 + radius1):
        return False
    else:
        return True
'''
cap = cv2.VideoCapture(1)#cv2.VideoCapture(os.getcwd() + '/test_video.mp4')
'''
cap = cv2.VideoCapture(1, cv2.CAP_DSHOW)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)  # set new dimensionns to cam object (not cap)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)

frame_width = int(cap.get(3))
frame_height = int(cap.get(4))

out = cv2.VideoWriter('test_jay.avi', cv2.VideoWriter_fourcc('M', 'J', 'P', 'G'), 10, (frame_width, frame_height))
motor = Motors()
curr_pos = 1
motor.moveRudders(90)
while (cap.isOpened()):

    ret, frame = cap.read()
    if ret == True:
        image = copy.deepcopy(frame)
        image2 = copy.deepcopy(frame)
        image_g = image[:, :, 1]
        image_r = image[:, :, 2]
        img_out = np.zeros(image_r.shape, dtype=np.uint8)
        image = cv2.GaussianBlur(image, (5, 5), 100)
        image = cv2.medianBlur(image, 5)
        grey = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

        prob_red = np.zeros([np.shape(image)[0], np.shape(image)[1]])

        prob_red = add_gaussians(image[:, :, 2], mu_red_red, std_red_red)
        # prob_yellow = add_gaussians(image[:,:,2], new_mu_yellow, new_std_yellow)+add_gaussians(image[:,:,1], new_mu_yellow, new_std_yellow)

        for i in range(0, image.shape[0]):
            for j in range(0, image.shape[1]):
                if prob_red[i][j] > 0.12 and image_g[i][j] < 170:
                    img_out[i][j] = 255
                else:
                    img_out[i][j] = 0

        ret_red, threshold_red = cv2.threshold(img_out, 240, 255, cv2.THRESH_BINARY)
        closing_red = cv2.dilate(threshold_red, kernel, iterations=1)
        closing_red = cv2.morphologyEx(closing_red, cv2.MORPH_OPEN, kernel)
        contours_red, hierarchy = cv2.findContours(closing_red, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        buoy_detected = False
        circles = []
        for contour in contours_red:
            if cv2.contourArea(contour) > 10:
                (x, y), radius = cv2.minEnclosingCircle(contour)
                center = (int(x), int(y))
                radius = int(radius)
                no_overlap = True
                for i in range(len(circles)):
                    if (inside(center,radius, circles[i][0], circles[i][1])):
                        no_overlap = False
                        break
                if radius > 25 and radius < 250 and no_overlap:
                    if x < frame_width / 2 - 10:
                        cv2.putText(img=image2, text='GOING LEFT', org=(100, 250), fontFace=cv2.FONT_HERSHEY_TRIPLEX,
                                    fontScale=1, color=(255, 255, 255), thickness=2)
                        if curr_pos != 0:
                            motor.moveRudders(0)
                            curr_pos = 0
                    elif x > frame_width / 2 + 10:
                        cv2.putText(img=image2, text='GOING RIGHT', org=(100, 250), fontFace=cv2.FONT_HERSHEY_TRIPLEX,
                                    fontScale=1, color=(255, 255, 255), thickness=2)
                        if curr_pos != 2:
                            motor.moveRudders(180)
                            curr_pos = 2
                    circles.append([center,radius])
                    cv2.circle(image2, center, radius, (0, 0, 255), 2)
                    buoy_detected = True

        cv2.imshow("red", np.hstack((closing_red)))

        #cv2.moveWindow("red", 0, 0)
        cv2.imshow('test', image2)
        cv2.moveWindow("test", 300, 300)
        out.write(image2)

        if cv2.waitKey(1) & 0xFF == ord('q'):   
            break
    if (curr_pos != 1 and buoy_detected == False):
        curr_pos = 1
        motor.moveRudders(90)

    else:
        break
print("done")
cap.release()
cv2.destroyAllWindows()
